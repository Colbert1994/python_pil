Entreda y salida de datos.
vamos a avanzar sobre la funcion print.
ingreso de datos.
estructura de datos.
variables.
Salida de datos
Print:
dentro de la funcion print, se puede concatenar con alguna variable, con otro texto, entre otros.
en python los comentarios se hacen con #
no hace falta llenar de comentarios, siempre tienen que ser precisos
\n es salto de linea.
\t tabulacion.
concatenar
print("Esto es "+ "Mundo")
print('hola' + ' ' + 'mundo')
sep ='' funcion de print.
con sep -> print('hola','mundo', sep=' ')entre las comillas
del sep ira lo que estaria entre los string
funcion end
con end, se agrega algo al final de de los elementos dentro del print
esto se usa cuando se arman archivos ccb
las funciones print son las mas usadas.
desde el print podemos ver lo que nos manda el front.

ENTRADA DE DATOS
funcion input.
permite leer las entradas por teclado, a  traves de la terminal
input('Ingrese un mensaje: ')
esto devuelve un tipo de dato en particular. 
funcion interna en python: type

Variables

Variable nos permite guardar informacion en la memoria de
la maquina.
usaremos el espacio de la memoria para almacenar algo.
autoexplicativa, tratar de nombrarla de forma acorde para lo
que lo estamos usando.
en python la asignacion es =
input siempre devuelve tipo string.
alt ctrl flechita para abajo bajar cursor genera mas cursores
shift alt flecha para abajo: copia
snipeds
type-> nos permite saber el tipo de datos que estamos trabajando
string * int = repite tantas veces el int
tratar de que las variables sean minusculas.
las mayusculas llaman a clases.


Tipo de datos:
int, boolean, float, str, list, tiple, 
indice [] es la posicion que ocupa. el primer elemento siempre
es 0(cero)
[0:hasta donde]
indice negativo empieza de atras para adelante en -1
Metodos:
.
lower(): devuelve cadena en minuscula
upper(): devuelve cadena en mayusculas
split(): devuelve una lista

Listas:
lista = ['elemento 1', 2, 'elemento3']
permite almacenar cualquier tipo de letra.
las listas permiten mantener el tipo de dato.
se puede acceder a indices.
puede cambiar

Metodo
append = agregar al ultimo
index = nos devuelve el indice del elemento que querramosprint(lista_1.index(('a', 'b')))
insert = agregar elemento por el indice (indice, elemento)


Tupla: no se puede cambiar 
para cambiar tenemos que sobreescribir.
inmutable.

Diccionario: estructura de datos, que permite manejarlos 
a traves de una llave valor. {}
las llaves tienen que ser string.
print(xxxxxx[nombre_en_diccionario]

Metodo
.get devuelve lo seleccionado.
tiene dos despues de la , es por si no encuentra. (Else)
.keys devuelve todas las keys, devuelve en lista.
# Metodo de diccionario
print(usuario.get('puesto', 'No encontrado')) #GET
keys_usuario = list(usuario.keys()) #KEYS
print(type(keys_usuario))
print(usuario.get(keys_usuario[0]))
values.

ejercicios. hacerlos
*mostrar variables, y sus valores
*dibujar en la consola de python.
*programa: que lea 4 palabras(ingresadas por el usuario)
calcule la longitud de cada una de ellas y las despliegue con su
longitud indicada con asteriscos.
ej: Arbol *****
tiene que mostrar la palabra ingresada y la cantidad de caracteres
Uno -> ***
*crear un diccionario del ejercicio anterior.

key va a ser la palabra y el value seran los asteriscos
agregar con numero las cantidades. 

para la clase que v iene. estructuras de control
condicionales y bucles.
